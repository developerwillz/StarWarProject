{"version":3,"sources":["webpack:///./src/app/planets/planet-details/planet-details.module.ts","webpack:///./src/app/planets/planet-details/planet-details.page.html","webpack:///./src/app/planets/planet-details/planet-details.page.scss","webpack:///./src/app/planets/planet-details/planet-details.page.ts"],"names":[],"mappings":"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","file":"planets-planet-details-planet-details-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { PlanetDetailsPage } from './planet-details.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PlanetDetailsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [PlanetDetailsPage]\n})\nexport class PlanetDetailsPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar color='primary'>\\n      <ion-buttons slot=\\\"start\\\">\\n          <ion-back-button></ion-back-button>\\n        </ion-buttons>\\n    <ion-title>{{ Rep.name }}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <ion-card>\\n        <p>Rotation Period:</p>\\n        <ion-card-content>{{Rep.rotation_period}}</ion-card-content>\\n        <p>Orbital Period:</p>\\n        <ion-card-content>{{Rep.orbital_period}}</ion-card-content>\\n        <p>Diameter:</p>\\n        <ion-card-content>{{Rep.diameter}}</ion-card-content>\\n        <p>Climate:</p>\\n        <ion-card-content>{{Rep.climate}}</ion-card-content>\\n        <p>Gravity:</p>\\n        <ion-card-content>{{Rep.gravity}}</ion-card-content>\\n        <p>Terrain:</p>\\n        <ion-card-content>{{Rep.terrain}}</ion-card-content>\\n        <p>Surface Water:</p>\\n        <ion-card-content>{{Rep.surface_water}}</ion-card-content>\\n        <p>Population:</p>\\n        <ion-card-content>{{Rep.population}}</ion-card-content>\\n        <p>Residents:</p>\\n      <ul>\\n        <li *ngFor=\\\"let r of Rep.residents\\\">\\n          {{ r }}\\n        </li>\\n      </ul>\\n      <p>Films:</p>\\n      <ul>\\n        <li *ngFor=\\\"let f of Rep.films\\\">\\n          {{ f }}\\n        </li>\\n      </ul>\\n      <p><strong>created: </strong></p>\\n      <p>{{Rep.created}}</p>\\n      <p><strong>edited: </strong></p>\\n      <p>{{Rep.edited}}</p>\\n      <p><strong>url: </strong></p>\\n      <p>{{Rep.url}}</p>\\n      </ion-card>\\n      <div>\\n        <ion-grid>\\n          <ion-row *ngFor=\\\"let comment of comments\\\">\\n              <ion-chip ion-col>\\n                <ion-label>{{ comment }}</ion-label>\\n              </ion-chip>\\n          </ion-row>\\n        </ion-grid>\\n      </div>\\n      <div padding>\\n        <form name = 'CommentsForm' id=\\\"CommentsForm\\\">\\n      <ion-input [(ngModel)]=\\\"commentInput\\\" name=\\\"thisInput\\\"  placeholder=\\\"Enter Your Comments\\\" type=\\\"text\\\" requeired=\\\"ture\\\"></ion-input>\\n      <!-- <ion-label color=\\\"dark\\\">{{ commentInput }}</ion-label> -->\\n      <ion-button expand=\\\"block\\\" (click)=\\\"refresh()\\\">Submit Comments</ion-button>\\n    </form>\\n    </div>\\n\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BsYW5ldHMvcGxhbmV0LWRldGFpbHMvcGxhbmV0LWRldGFpbHMucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { StarWarServiceService } from 'src/app/star-war-service.service';\nimport { HttpClient } from '@angular/common/http';\nimport { Storage } from '@ionic/storage';\n\n@Component({\n  selector: 'app-planet-details',\n  templateUrl: './planet-details.page.html',\n  styleUrls: ['./planet-details.page.scss'],\n})\nexport class PlanetDetailsPage implements OnInit {\n  planet;\n  Rep;\n  Temp: any[];\n  keyhomeworld = 'homeworld';\n  keyName = 'name';\n  keypeople = 'people';\n  keyVehicle = 'vehicles';\n  keyTitle = 'title';\n  keyfilms = 'films';\n  comments: string[] = [];\n  commentInput: string;\n\n  constructor(private service: StarWarServiceService, private httpClient: HttpClient, public storage: Storage) { }\n\n  ngOnInit() {\n    this.planet = this.service.currentPlanet;\n    this.Rep = JSON.parse(JSON.stringify(this.planet));\n        // DATA part starts\n    this.storage.get(this.planet[this.keyName]).then((val) => {\n          // console.log('Your test is', val);\n          if (val != null) {\n          this.comments = val;\n          } else {\n            this.comments = [];\n          }\n        });\n        // DATA part ends\n        // SET FOR FILM\n    this.ReplaceUrl('films');\n        // SET FOR PIROT\n    this.ReplaceUrl('residents');\n  }\n\n  ReplaceUrl(keyword) {\n    const stuff =  this.Rep[keyword];\n    // console.log('BEFORE_REPkeyword', this.Rep[keyword]);\n    // console.log('BEFORE_PLANETkeyword', this.planet[keyword]);\n    if (typeof(stuff) === 'string') {\n    this.Rep[keyword] = [];\n    this.service.getResult(this.planet[keyword]).subscribe(data => {\n      this.Rep[keyword].push(JSON.parse((data[this.keyName]))); });\n\n    // console.log('after', typeof(this.Rep[keyword]));\n    } else {\n    this.Rep[keyword] = [];\n\n    stuff.forEach(item => {\n      this.service.getResult(item).subscribe(data => {\n        if (keyword === 'films') {\n          if (data[this.keyTitle] != null) {\n          this.Rep[keyword].push(data[this.keyTitle]);\n          // console.log('REP_film-DATA', this.Rep[this.keyTitle]);\n          // console.log('After_PlanetIF', this.planet[keyword]);\n          // console.log('After_RepIF', this.Rep[keyword]);\n        }} else {\n          this.Rep[keyword].push(data[this.keyName]);\n          // console.log( 'REP_Other', this.Rep[this.keyName]);\n          // console.log('After_PlanetELSE', this.planet[keyword]);\n        }\n      });\n    });\n    }\n  }\n  refresh() {\n    this.comments.push(this.commentInput);\n    console.log(this.comments);\n    this.storage.set(this.planet[this.keyName], this.comments);\n  }\n\n}\n"],"sourceRoot":""}